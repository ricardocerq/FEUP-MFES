class StrategoOperations
	operations
	
		public static instanceString: StrategoState`Instance ==> seq of char
			instanceString (inst) ==(
				dcl str: seq of char := "\n";
				let f = getChar(inst) in (
					for y = 1 to 10 do (
						for x = 1 to 10 do (
								str := str ^ f(mk_Stratego`Point(x,y)) ^ "  ";
						);
						str := str ^ "\n\n";
					)
				);
				return str;
			)
		;
		public static printBoard: StrategoState`Instance ==>()
			printBoard(inst) == 
				IO`println(instanceString(inst))
		;
		
		public static newRandomInstance: () ==> StrategoState`Instance
			newRandomInstance() ==
			let ini = StrategoState`defaultStartingInstance() in (StrategoState`setBoard(ini, StrategoState`fillBoardRandom(ini.ruleSet)))
		;
		
	functions
		
		public getGameData: StrategoState`Instance -> seq of ?
			getGameData(inst) ==
				[inst, Stratego`possibleMoves(inst)]
		;
		
		public getChar: StrategoState`Instance -> Stratego`Point -> seq of char
			getChar(inst)(p) ==
				if(Stratego`isLake(p)) then
					"~~"
				else	(
					let piece = StrategoState`pieceAt(inst.board)(p) in (
						if piece = nil then
							"--" 
						else 
						(
							let ex = if(piece.team = <Blu>) then "b" else "r" in (
								if piece.character = <Flag>
									then "F"^ex
									else if piece.character = <Bomb>
													then "B"^ex
													else let str = VDMUtil`val2seq_of_char[nat](StrategoRules`getStrength(inst.ruleSet)(piece.character)-1) in (
														[str(len str)]^ex
													)
							)
						)
					)
				)
		;
		
		

end StrategoOperations