class Stratego
	types
	
		public Point:: 	
			x: nat1
			y: nat1;
												
		public Move:: 	
			src: Point
			dst: Point
			inv mk_Move(s, d) == ((s.x = d.x) or (s.y = d.y)) and not ((s.x = d.x) and (s.y = d.y)) 
		;				
		public Character = 	 
			<Flag>
		| <Bomb> 		
		| <Spy> 				
		| <Scout>
		| <Miner>
		| <Sergeant> 
		| <Lieutenant> 
		| <Captain>
		| <Major>
		| <Colonel> 
		| <General> 
		| <Marshal>;
											 
		public Team = 
			<Red>
		| <Blu>
		
								
	values
		
	functions
	
		public aligned: Point -> Point -> (bool*bool)
			aligned(p1)(p2) ==
				mk_(p1.x = p2.x, p1.y = p2.y)
			
			post RESULT.#1 = true <=> p1.x = p2.x and 
					 RESULT.#2 = true <=> p1.y = p2.y and
					 not (RESULT.#1 and RESULT.#2)
		;
		
		public getOpponent: Team -> Team
			getOpponent(pl) ==
			if pl = <Red> 
				then <Blu> 
				else <Red>
			
			post RESULT <> pl
		;
		
		public inInterval: nat * nat -> nat1 -> bool
			inInterval(fl,ceil)(val) ==
				val > fl and val < ceil
				
			pre fl <= ceil
		;
		
		public validDim: nat1 -> bool 
			validDim(v) ==
			inInterval(0, StrategoRuleSet`boardSize+1)(v)
		;
		
		public intervalSet: nat*nat -> set of nat1
			intervalSet(fl,ceil) ==
			{fl+1, ..., ceil-1}
			
			pre fl <= ceil
					and fl>= 0
			post forall a in set RESULT & inInterval(fl, ceil)(a)
		;
		
		public validDimSet: () -> set of nat1
			validDimSet() ==
			intervalSet(0, StrategoRuleSet`boardSize+1)
		;
		
		public validPoint: Point -> bool 
			validPoint(p) ==
			validDim(p.x) and validDim(p.y)
		;
		
		public invertedPoint: Point -> Point
			invertedPoint(p) == 
			mk_Point(p.x, StrategoRuleSet`boardSize - p.y + 1)
				
			pre validPoint(p)
			post validPoint(p) and p.x = RESULT.x and p.y = StrategoRuleSet`boardSize - RESULT.y + 1
		;
		
		public pointsInRanges: set of nat1 * set of nat1 -> set of Point
			pointsInRanges(xrange, yrange) ==
			{ mk_Point(x,y) | x in set xrange , y in set yrange }
			
			post forall a in set RESULT & validPoint(a)
		;
		
		public allPoints: () -> set of Point
			allPoints() ==
			pointsInRanges(validDimSet(),validDimSet())
		;
		
		public pointsFiltered: (() -> set of Point) -> (Point->bool) -> set of Point
			 pointsFiltered(gen)(f)==
			 Utils`filterSet[Point](f)(gen())
		;
		
		public allPointsFiltered: (Point->bool) -> set of Point
			 allPointsFiltered(f)==
			 pointsFiltered(allPoints)(f)
		;
		
		public isInBackRowBlu: Point -> bool
			isInBackRowBlu(p) ==
			p.y = 1
			
			post RESULT <=> (p.y = 1) -- trivial
		;
		
		public isInBackRowRed: Point -> bool
		isInBackRowRed(p) ==
			p.y = StrategoRuleSet`boardSize
			
			post RESULT <=> (p.y = StrategoRuleSet`boardSize) -- trivial
		;
		
		public isInBackRow: Team -> Point -> bool
			isInBackRow(pl)(p) ==
			if pl = <Red>
				then isInBackRowRed(p)
				else isInBackRowBlu(p)
				
			pre validPoint(p)
			post pl = <Red> => ((RESULT = true) <=> isInBackRowRed(p)) and
					 pl = <Blu> => ((RESULT = true) <=> isInBackRowBlu(p))
		;
		
		public isInTeamAreaBlu: Point -> bool
			isInTeamAreaBlu(p) ==
			p.y > 0 and p.y <= StrategoRuleSet`boardSize * StrategoRuleSet`sideProportion
			
			post RESULT <=> (p.y > 0 and p.y <= StrategoRuleSet`boardSize * StrategoRuleSet`sideProportion) -- trivial
		;
		
		public isInTeamAreaRed: Point -> bool
			isInTeamAreaRed(p) ==
			p.y <= StrategoRuleSet`boardSize and p.y > StrategoRuleSet`boardSize - StrategoRuleSet`boardSize * StrategoRuleSet`sideProportion
			
			post RESULT <=> (p.y <= StrategoRuleSet`boardSize and p.y > StrategoRuleSet`boardSize - StrategoRuleSet`boardSize * StrategoRuleSet`sideProportion) --trivial
		;
		
		public isInTeamArea: Team -> Point -> bool
			isInTeamArea(pl)(p) ==
			if pl = <Red>
				then isInTeamAreaRed(p)
				else isInTeamAreaBlu(p)
				
			pre validPoint(p)
			post pl = <Red> => ((RESULT = true) <=> isInTeamAreaRed(p)) and
					 pl = <Blu> => ((RESULT = true) <=> isInTeamAreaBlu(p))
		;
		
		public pointBetween: Point -> Point -> Point -> bool
			pointBetween(src)(dst)(point) ==
				let align = aligned(src)(dst), 
						maxx = Utils`max(src.x,dst.x),
						maxy = Utils`max(src.x,dst.x) 
						in (
					if align.#1
						then true
						else true
				)
		;
		
		public isValidMove(inst: StrategoInstance, m: Move) res: bool == 
			true
		;
 
end Stratego

