class Stratego
	types
	
		public Point:: 	
			x: nat1
			y: nat1;
												
		public Move:: 	
			src: Point
			dst: Point;
										
		public Character = 	 
			<Flag>
		| <Bomb> 		
		| <Spy> 				
		| <Scout>
		| <Miner>
		| <Sergeant> 
		| <Lieutenant> 
		| <Captain>
		| <Major>
		| <Colonel> 
		| <General> 
		| <Marshal>;
											 
		public Team = 
			<Red>
		| <Blu>
		
								
	values
		
	functions
		
		public getOpponent: Team -> Team
			getOpponent(pl) ==
			if pl = <Red> 
				then <Blu> 
				else <Red>
			
			post RESULT <> pl
		;
		
		public validDim: nat1 -> bool 
			validDim(v) ==
			v > 0 and v <= StrategoRuleSet`boardSize
		;
		
		public validDimSet: () -> set of nat1
			validDimSet() ==
			{1, ..., StrategoRuleSet`boardSize}
			
			post forall a in set RESULT & validDim(a)
		;
		
		public validPoint: Point -> bool 
			validPoint(p) ==
			validDim(p.x) and validDim(p.y)
		;
		
		public invertedPoint: Point -> Point
			invertedPoint(p) == 
			mk_Point(p.x, StrategoRuleSet`boardSize - p.y + 1)
				
			pre validPoint(p)
			post validPoint(p) and p.x = RESULT.x and p.y = StrategoRuleSet`boardSize - RESULT.y + 1
		;
		
		public genAllPoints: () -> set of Point
			genAllPoints() ==
			{ mk_Point(x,y) | x in set validDimSet() , y in set validDimSet() }
		;
		
		public genPoints: (Point->bool) -> set of Point
			genPoints(f) ==
			{ p | p in set genAllPoints() & f(p) }
		;
		
		public isInBackRowBlu: Point -> bool
			isInBackRowBlu(p) ==
			p.y = 1
			
			post RESULT <=> (p.y = 1) -- trivial
		;
		
		public isInBackRowRed: Point -> bool
		isInBackRowRed(p) ==
			p.y = StrategoRuleSet`boardSize
			
			post RESULT <=> (p.y = StrategoRuleSet`boardSize) -- trivial
		;
		
		public isInBackRow: Team -> Point -> bool
			isInBackRow(pl)(p) ==
			if pl = <Red>
				then isInBackRowRed(p)
				else isInBackRowBlu(p)
				
			pre validPoint(p)
			post pl = <Red> => ((RESULT = true) <=> isInBackRowRed(p)) and
					 pl = <Blu> => ((RESULT = true) <=> isInBackRowBlu(p))
		;
		
		public isInTeamAreaBlu: Point -> bool
			isInTeamAreaBlu(p) ==
			p.y > 0 and p.y <= StrategoRuleSet`boardSize * StrategoRuleSet`sideProportion
			
			post RESULT <=> (p.y > 0 and p.y <= StrategoRuleSet`boardSize * StrategoRuleSet`sideProportion) -- trivial
		;
		
		public isInTeamAreaRed: Point -> bool
			isInTeamAreaRed(p) ==
			p.y <= StrategoRuleSet`boardSize and p.y > StrategoRuleSet`boardSize - StrategoRuleSet`boardSize * StrategoRuleSet`sideProportion
			
			post RESULT <=> (p.y <= StrategoRuleSet`boardSize and p.y > StrategoRuleSet`boardSize - StrategoRuleSet`boardSize * StrategoRuleSet`sideProportion) --trivial
		;
		
		public isInTeamArea: Team -> Point -> bool
			isInTeamArea(pl)(p) ==
			if pl = <Red>
				then isInTeamAreaRed(p)
				else isInTeamAreaBlu(p)
				
			pre validPoint(p)
			post pl = <Red> => ((RESULT = true) <=> isInTeamAreaRed(p)) and
					 pl = <Blu> => ((RESULT = true) <=> isInTeamAreaBlu(p))
		;
		
		public isValidMove(inst: StrategoInstance, m: Move) res: bool == 
			true
		;
 
end Stratego

