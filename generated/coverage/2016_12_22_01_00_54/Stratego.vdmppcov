class Stratego
	types
	
		public Point:: 	
			x: nat1
			y: nat1;
												
		public Move:: 	
			src: Point
			dst: Point;
										
		public Character = 	 
			<Flag>
		| <Bomb> 		
		| <Spy> 				
		| <Scout>
		| <Miner>
		| <Sergeant> 
		| <Lieutenant> 
		| <Captain>
		| <Major>
		| <Colonel> 
		| <General> 
		| <Marshal>;
											 
		public Player = 
			<Red>
		| <Blu>
		
								
	values
		
	functions
		
		public getOpponent(pl: Player) res: Player ==
			if pl = <Red> 
				then <Blu> 
				else <Red>
			
			post res <> pl
		;
		
		public validDim(bSize: nat1, v: nat1) res: bool ==
			v > 0 and v <= bSize
		;
		
		public validDimSet(bSize: nat1) res: set of nat1 ==
			{1, ..., bSize}
			
			post forall a in set res & validDim(bSize, a)
		;
		
		public validPoint(bSize: nat1, p: Point) b: bool ==
			validDim(bSize, p.x) and validDim(bSize, p.y)
		;
		
		public invertedPoint(bSize: nat1, p: Point) res: Point == 
			mk_Point(p.x, bSize - p.y + 1)
				
			pre validPoint(bSize, p)
			post validPoint(bSize, p) and p.x = res.x and p.y = bSize - res.y + 1
		;
		
		public isInBackRowBlu(bSize: nat1, p: Point) res: bool ==
			p.y = bSize
			
			post res <=> (p.y = bSize) --trivial
		;
		
		public isInBackRowRed(bSize: nat1, p: Point) res: bool ==
			p.y = 1
			
			post res <=> (p.y = 1) --trivial
		;
		
		public isInBackRow(bSize: nat1, p: Point, pl: Player) res: bool == 
			if pl = <Red>
				then isInBackRowRed(bSize, p)
				else isInBackRowBlu(bSize, p)
				
			pre validPoint(bSize, p)
			post pl = <Red> => ((res = true) <=> isInBackRowRed(bSize, p)) and
					 pl = <Blu> => ((res = true) <=> isInBackRowBlu(bSize, p))
		;
		
		public genAllPoints(bSize: nat1) res: set of Point ==
			 {mk_Point(x,y) | x in set validDimSet(bSize) , y in set validDimSet(bSize)}
		;
		
		public genPoints(bSize: nat1, f: Point->bool) res: set of Point ==
			 {p | p in set genAllPoints(bSize) & f(p)}
		;
		
		--public isInPlayerAreaBlu(p: Point) res: bool ==
		--	p.y > 0 and p.y < boardSize * sideProportion
		--	
		--	post res <=> (p.y = boardSize) --trivial
		--;
		
		--public isInPlayerAreaRed(p: Point) res: bool ==
		--	p.y = 1
			
		--	post res <=> (p.y = 1) --trivial
		--;
		
		--public isInPlayerArea(p: Point, pl:Player) b: bool ==
		--	true
		--;
 
end Stratego