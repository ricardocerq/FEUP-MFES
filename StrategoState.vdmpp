class StrategoState
	types
		public Board  = map Stratego`Point to Stratego`Piece
		;
		
		public Player::
			team: Stratego`Team
			plays: seq of Stratego`Move
		;
		
		public Instance::
			ruleSet: StrategoRules`RuleSet
			currentTeam: Stratego`Team
			players: map Stratego`Team to Player
			board: Board
			
			inv mk_Instance(ruleSet,t,pl,board) == 
				forall team in set dom pl & pl(team).team = team and 
				card dom pl = 2 and
				--len pl(t).plays <= len pl(Stratego`getOpponent(t)).plays and
				let captureGetter = getCaptures(ruleSet)(board),
						pieceGetter = StrategoRules`getAllPieces(ruleSet) in (
					--Utils`sameElems[Stratego`Piece]
					--(getAllPieces(board) ^ captureGetter(<Blu>) ^ captureGetter(<Red>))
					--(pieceGetter(<Blu>) ^ pieceGetter(<Red>))
					true
				)
		;
		
	functions
	
		public defaultStartingInstance: () -> Instance
			defaultStartingInstance() ==
				let ruleset = StrategoRules`getDefaultRuleSet() in (
					 mk_StrategoState`Instance(
					 	ruleset, 
					 	<Blu>,
					 	{<Blu> |-> newPlayer(ruleset)(<Blu>) , <Red> |-> newPlayer(ruleset)(<Red>)},
					 	{|->}
					 )
				 )
		;
		
		public newPlayer: StrategoRules`RuleSet -> Stratego`Team -> Player
			newPlayer(-)(t) == 
				mk_Player(t, [])
			
			post RESULT.team = t and RESULT.plays = []
		;

		public pieceAt: Board -> Stratego`Point -> [Stratego`Piece]
			pieceAt(board)(p) ==
				if p in set dom board
					then board(p)
					else nil
			
			pre Stratego`validPoint(p)
			post (RESULT = nil => p not in set dom board) and
					 (RESULT <> nil => board(p) = RESULT)
		;
		
		public getAllPieces: Board -> seq of Stratego`Piece
			getAllPieces(board) ==
				StrategoUtils`reduceMap[Stratego`Point, Stratego`Piece, seq of Stratego`Piece](lambda acc: seq of Stratego`Piece, pt: Stratego`Point, piece: Stratego`Piece & acc ^ [piece])
				([])
				(board)
		;
		
		public getPieces: Board -> Stratego`Team -> seq of Stratego`Piece
			getPieces(board)(team) ==
				[el | el in seq getAllPieces(board) & el.team = team]
		;
		
		public addMovePlayer: Player -> Stratego`Move -> Player
			addMovePlayer(p)(move) ==
				mk_Player(p.team, p.plays ^ [move])
			
			post RESULT.team = p.team and RESULT.plays = p.plays ^ [move] 
		;
		
		public addMoveBoard: Board -> Stratego`Move -> (bool*bool) -> Board 
			addMoveBoard(board)(m)(mk_(keepSrc,keepDst)) ==
				let srcPiece = StrategoState`pieceAt(board)(m.src),
						boardNoSrc = ({m.src} <-: board) in (
						
							if (keepDst)
								then boardNoSrc 																		-- only remove src
								else if (keepSrc)
												then boardNoSrc ++ {m.dst |-> srcPiece} 		-- replace piece at dst with src piece
												else {m.dst} <-: boardNoSrc 								-- remove both
												
				)
				
			pre not (keepSrc and keepDst) and StrategoState`pieceAt(board)(m.src) <> nil
			post StrategoState`pieceAt(RESULT)(m.src) = nil and 
					 let srcPiece = StrategoState`pieceAt(board)(m.src),
							 dstPiece = StrategoState`pieceAt(board)(m.dst),
							 finalPiece = StrategoState`pieceAt(RESULT)(m.dst) in (
								
								(keepSrc <=> finalPiece = srcPiece) and
								(keepDst <=> finalPiece = dstPiece)
					)
		;
		
		public setBoard: Instance * Board -> Instance
			setBoard(inst, board) ==
				mk_Instance(inst.ruleSet, inst.currentTeam, inst.players, board)
			
			post RESULT.ruleSet = inst.ruleSet and
					 RESULT.currentTeam = inst.currentTeam and
					 RESULT.players = inst.players and
					 RESULT.board = board
		;
		
		public placePieceBoard: Board -> Stratego`Piece -> Stratego`Point -> Board
			placePieceBoard(board)(piece)(p) ==
				board ++ {p |-> piece}
			
			pre pieceAt(board)(p) = nil and
					not Stratego`isLake(p)
					
			post pieceAt(RESULT)(p) = piece
		;
		
		public placePiece: Instance -> Stratego`Piece -> Stratego`Point -> Instance
			placePiece(inst)(piece)(p) ==
				mk_Instance(inst.ruleSet, inst.currentTeam, inst.players, placePieceBoard(inst.board)(piece)(p))
			
			pre pre_placePieceBoard(inst.board)(piece)(p)
			
			post post_placePieceBoard(inst.board)(piece)(p, RESULT.board)
		;
		
		public getCaptures: StrategoRules`RuleSet -> Board -> Stratego`Team -> seq of Stratego`Piece
			getCaptures(ruleSet)(board)(team) ==
				StrategoUtils`diff[Stratego`Piece](StrategoRules`getAllPieces(ruleSet)(team))(getPieces(board)(team))
		;
		
		public getCaptures: StrategoState`Instance -> Stratego`Team -> seq of Stratego`Piece
			getCaptures(inst)(team) ==
				getCaptures(inst.ruleSet)(inst.board)(team)
		;
		
		public repeatedMove: Player -> Stratego`Move -> bool
				repeatedMove(player)(m) == 
					let plays = player.plays in (
						if(len plays < 2) then 
							false
						else let lastPlay = plays(len plays),
								secondToLastPlay = plays(len plays-1) in (
							lastPlay.src = m.dst and 
							lastPlay.dst = m.src and 
							secondToLastPlay.src = m.src and 
							secondToLastPlay.dst = m.dst
					)
				)
				post RESULT <=> 
						 let plays = player.plays in (
								len plays >= 2 and
								let lastPlay = plays(len plays),
										secondToLastPlay = plays(len plays-1) in (
									lastPlay.src = m.dst and 
									lastPlay.dst = m.src and 
									secondToLastPlay.src = m.src and 
									secondToLastPlay.dst = m.dst
								)
						)
		;
		
		public fillBoard: StrategoRules`RuleSet -> StrategoUtils`Ordering -> StrategoUtils`Ordering -> Board
			fillBoard(ruleSet)(ordersBlu)(ordersRed) == (
				let areaGen = lambda t: Stratego`Team & Stratego`allPointsFiltered(Stratego`isInTeamArea(t)),
						bluArea = areaGen(<Blu>),
						redArea = areaGen(<Red>),
						teamToPieces = lambda t: Stratego`Team & Stratego`toPieces(StrategoRules`getAllCharacters(ruleSet))(t),
						bluPieces = teamToPieces(<Blu>),
						redPieces = teamToPieces(<Red>) in (
						
							StrategoUtils`createMap[Stratego`Point, Stratego`Piece](bluArea)(StrategoUtils`rearrange[Stratego`Piece](ordersBlu)(bluPieces)) ++
							StrategoUtils`createMap[Stratego`Point, Stratego`Piece](redArea)(StrategoUtils`rearrange[Stratego`Piece](ordersRed)(redPieces))
				
				)
			)
			pre len ordersBlu = StrategoRules`getNumberOfCharacters() and len ordersRed = StrategoRules`getNumberOfCharacters()
		;
		
		public gameOver: Instance -> bool
			gameOver(inst) ==
				let f = lambda t: Stratego`Team & mk_Stratego`Piece(<Flag>, t) not in set rng inst.board in (
					f(<Red>) or f(<Blu>)
				)
				
			post RESULT <=> (mk_Stratego`Piece(<Flag>, <Red>) not in set rng inst.board or mk_Stratego`Piece(<Flag>, <Blu>) not in set rng inst.board)
		;
		
		public skipTurn: Instance -> Instance
			skipTurn(inst) ==
				mk_Instance(inst.ruleSet, Stratego`getOpponent(inst.currentTeam), inst.players, inst.board)
		;
		
	operations
	
		public static fillBoardRandom: StrategoRules`RuleSet ==> [Board]
			fillBoardRandom(ruleSet) == (
				let num = StrategoRules`getNumberOfCharacters(),
						bluOrder = StrategoOperations`randomOrdering(num),
						redOrder = StrategoOperations`randomOrdering(num) in (
					return fillBoard(ruleSet)(bluOrder)(redOrder);
				)
			)
		;
		
end StrategoState