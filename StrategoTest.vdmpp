class StrategoTest is subclass of TestCase
	functions
		private symmetricAreas(a, b: set of Stratego`Point) res: bool ==
			Utils`mapFunctionSet[Stratego`Point,Stratego`Point](Stratego`invertedPoint)(a) = b
		;
	operations
	
		public runFullSuite : () ==> ()
		runFullSuite () == 
		let	ts: TestSuite = new TestSuite(new StrategoTest()),
				result = new TestResult()
		in
		(
		  ts.run(result);
		  IO`print(result.toString());
		);
		
		
		
		public test1() == (
			dcl rules: StrategoRules`RuleSet := StrategoRules`getDefaultRuleSet();
			dcl positions: set of Stratego`Point := Stratego`allPoints();
			
			dcl bluArea: set of Stratego`Point := Stratego`allPointsFiltered(Stratego`isInTeamArea(<Blu>));
			dcl redArea: set of Stratego`Point := Stratego`allPointsFiltered(Stratego`isInTeamArea(<Red>));
			
			dcl bluBack: set of Stratego`Point := Stratego`allPointsFiltered(Stratego`isInBackRow(<Blu>));
			dcl redBack: set of Stratego`Point := Stratego`allPointsFiltered(Stratego`isInBackRow(<Red>));
			
				--genAllPoints(rule.boardSize)
			Assert`assertTrue(Utils`sprintf("Red and blue areas should have same cardinality, but are: {} and {}", [card redArea, card bluArea]), card bluArea = card redArea);
			Assert`assertTrue(Utils`sprintf("Red and blue areas should have cardinality of 40, but are: {} and {}", [card redArea, card bluArea]), card bluArea = 40 and  card redArea = 40);
			Assert`assertTrue(Utils`sprintf("Red and blue areas should be symmetric, but are \n {} \n{}", [redArea, bluArea]), symmetricAreas(bluArea, redArea));
			Assert`assertTrue(Utils`sprintf("Red and blue backs should have cardinality of 10, but are: {} and {}", [card redBack, card bluBack]), card bluBack = 10 and  card redBack = 10);
			Assert`assertTrue(Utils`sprintf("Red and blue backs should have same cardinality, but are: {} and {}", [card redBack, card bluBack]), card bluBack = card redBack);
			Assert`assertTrue(Utils`sprintf("Red and blue backs should be symmetric, but are \n {} \n{}", [redBack, bluBack]), symmetricAreas(bluBack, redBack));
		);
		public test2() == (
			dcl inst: StrategoState`Instance := StrategoState`defaultStartingInstance();
			inst := StrategoState`setBoard(inst, StrategoState`fillBoardRandom(inst.ruleSet));
			StrategoOperations`printBoard(inst);
		);
		
		public static main() ==
			new StrategoTest().test1()
		;
			

end StrategoTest