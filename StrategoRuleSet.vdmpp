class StrategoRuleSet
	values
		public boardSize = 10;
		
		public sideProportion = 0.4;
		
	instance variables
	
		public maxRescuesPerPlayer: nat1 := 2;
		
		public agressorAdvantage: bool := false;
		
		public silentDefense: bool := false;
		
		public multiplicities: map Stratego`Character to nat1 := {
			<Flag> |-> 1 ,
			<Bomb> |-> 6 ,
			<Spy> |-> 1 ,
			<Scout> |-> 8 ,
			<Miner> |-> 5 ,
			<Sergeant> |-> 4 ,
			<Lieutenant> |-> 4 ,
			<Captain> |-> 4 ,
			<Major> |-> 3 ,
			<Colonel> |-> 2 ,
			<General> |-> 1 ,
			<Marshal> |-> 1 
		};
		
		public characterStrengths: seq of Stratego`Character := [
			<Flag>,
			<Spy>,
			<Scout>,
			<Miner>,
			<Sergeant>,
			<Lieutenant>,
			<Captain>,
			<Major>,
			<Colonel>,
			<General>,
			<Marshal>,
			<Bomb>
		];
		
		public specialMovementRanges: map Stratego`Character to nat := {
			<Flag> |-> 0 ,
			<Bomb> |-> 0 ,
			<Scout> |-> boardSize
		};
		
		public specialStrengths: map Stratego`Character to Stratego`Character := {
			<Spy> |-> <Marshal>,
			<Miner> |-> <Bomb>
		};
		
		public cannotRescue: set of Stratego`Character := {
			<Scout>
		};
		
		public cannotBeRescued: set of Stratego`Character := {
			<Bomb>
		};
		
		inv Utils`reduceMap[?, nat, nat]((lambda acc: nat, -: ?, n: nat & acc + n))(0)(multiplicities)
				= boardSize * boardSize * sideProportion
				
				and specialMovementRanges(<Flag>) = 0
				
	operations
		StrategoRuleSet(
			maxRescuesPerPlayer_arg: nat1,
			agressorAdvantage_arg: bool,
			silentDefense_arg: bool,
			multiplicities_arg: map Stratego`Character to nat1,
			characterStrengths_arg: seq of Stratego`Character,
			specialMovementRanges_arg: map Stratego`Character to nat,
			specialStrengths_arg: map Stratego`Character to Stratego`Character,
			cannotRescue_arg: set of Stratego`Character,
			cannotBeRescued_arg: set of Stratego`Character
		) 
		res: StrategoRuleSet == 
			(
				res.maxRescuesPerPlayer := maxRescuesPerPlayer_arg;
				res.agressorAdvantage := agressorAdvantage_arg;
				res.silentDefense := silentDefense_arg;
				res.multiplicities := multiplicities_arg;
				res.characterStrengths := characterStrengths_arg;
				res.specialMovementRanges := specialMovementRanges_arg;
				res.specialStrengths := specialStrengths_arg;
				res.cannotRescue := cannotRescue_arg;
				res.cannotBeRescued := cannotBeRescued_arg;
			
				return self
			)
		;
end StrategoRuleSet