class StrategoRules
	values
		public boardSize = 10;
		
		public sideProportion = 0.4;
		
		public lakes = {
			mk_Stratego`Point(3,5),
			mk_Stratego`Point(3,6),
			mk_Stratego`Point(4,5),
			mk_Stratego`Point(4,6),
			
			mk_Stratego`Point(7,5),
			mk_Stratego`Point(7,6),
			mk_Stratego`Point(8,5),
			mk_Stratego`Point(8,6)
		};
		
	types
	--mu
		public RuleSet::
			agressorAdvantage: bool
			multiplicities: map Stratego`Character to nat
			characterStrengths: seq of Stratego`Character
			specialMovementRanges: map Stratego`Character to nat
			specialStrengths: map Stratego`Character to Stratego`Character
			
			inv mk_RuleSet(-,mul,-,-,-) ==
				--sum of the number of each type of character should add up to the total amount necessary to fill a player's side 
					StrategoUtils`reduceMap[Stratego`Character, nat, nat]
					(lambda acc: nat, -: Stratego`Character, n: nat & acc + n)
					(0)
					(mul)
						= boardSize * boardSize * sideProportion
					
		;
				
	operations
		
		functions
			public getDefaultRuleSet: () -> RuleSet
				getDefaultRuleSet() ==
					mk_RuleSet(
						 false, 
						 {
							<Flag> |-> 1 ,
							<Bomb> |-> 6 ,
							<Spy> |-> 1 ,
							<Scout> |-> 8 ,
							<Miner> |-> 5 ,
							<Sergeant> |-> 4 ,
							<Lieutenant> |-> 4 ,
							<Captain> |-> 4 ,
							<Major> |-> 3 ,
							<Colonel> |-> 2 ,
							<General> |-> 1 ,
							<Marshall> |-> 1 
						}, 
						[
							<Flag>,
							<Spy>,
							<Scout>,
							<Miner>,
							<Sergeant>,
							<Lieutenant>,
							<Captain>,
							<Major>,
							<Colonel>,
							<General>,
							<Marshall>,
							<Bomb>
						], 
						{
							<Flag> |-> 0 ,
							<Bomb> |-> 0 ,
							<Scout> |-> boardSize
						}, 
						{
							<Spy> |-> <Marshall>,
							<Miner> |-> <Bomb>
						} 
					)
			;
			-- a character's strength corresponds with its position in the array of character strengths
			public getStrength: RuleSet -> Stratego`Character -> nat
				getStrength(ruleset)(character) ==
					StrategoUtils`indexOf[Stratego`Character](ruleset.characterStrengths)(character)
				
				pre character in set elems ruleset.characterStrengths
				post ruleset.characterStrengths(RESULT) = character
			;
			
			public getMovementRange: RuleSet->Stratego`Character-> nat
				getMovementRange(ruleset)(character) ==
					if(character in set dom ruleset.specialMovementRanges) then 
						ruleset.specialMovementRanges(character)
					else 
						1
			;
			
			public getNumberOfCharacters: () -> nat
				getNumberOfCharacters() ==
					boardSize * sideProportion * boardSize
			;
			
			public getAllCharacters: RuleSet -> seq of Stratego`Character 
				getAllCharacters(ruleSet) ==
					StrategoUtils`countToSeq[Stratego`Character](ruleSet.multiplicities)
					
				post StrategoUtils`countElems[Stratego`Character](RESULT) = ruleSet.multiplicities
			;
			
			public getAllPieces: RuleSet -> Stratego`Team -> seq of Stratego`Piece
				getAllPieces(ruleSet)(team) ==
					Stratego`toPieces(getAllCharacters(ruleSet))(team)
				
				post (forall el in seq RESULT & el.team = team) and
							Stratego`toCharacters(RESULT) = getAllCharacters(ruleSet)
			;
			
			public compareChar: RuleSet -> Stratego`Character -> Stratego`Character -> StrategoUtils`ComparisonResult
				compareChar(ruleSet)(c1)(c2) ==
					if(c1 = c2) then
						<EQUAL>
					else if((c1 in set dom ruleSet.specialStrengths and ruleSet.specialStrengths(c1) = c2) or 
									getStrength(ruleSet)(c1) > getStrength(ruleSet)(c2)) then
						<GREATER>
					else 
						<LESSER>
			;
			
			public resolveAttack: RuleSet -> Stratego`Piece -> [Stratego`Piece] -> (bool*bool)
				resolveAttack(ruleSet)(p1)(p2) ==
					if(p2 = nil) then 
						mk_(true, false)
					else 
					cases compareChar(ruleSet)(p1.character)(p2.character):
						<GREATER> -> mk_(true, false),
						<LESSER> -> mk_(false, true),
						<EQUAL> -> (
							if(ruleSet.agressorAdvantage) then 
									mk_(true,false)
								else 
									mk_(false,false)
						)
					end
					
				pre p2 = nil or p1.team <> p2.team
			;
			
			
end StrategoRules