class Stratego
	types
	
		public Point:: 	
			x: nat1
			y: nat1
		;
												
		public Move:: 	
			src: Point
			dst: Point
			--inv mk_Move(s, d) == aligned(s)(d)
		;
			
		public Character = 	 
			<Flag>
		| <Bomb> 		
		| <Spy> 				
		| <Scout>
		| <Miner>
		| <Sergeant> 
		| <Lieutenant> 
		| <Captain>
		| <Major>
		| <Colonel> 
		| <General> 
		| <Marshall>
		;
											 
		public Team = 
			<Red>
		| <Blu>
		;
		
		public Piece::
			character: Character
			team: Team
		;
								
	functions
	
		public dist: Point -> Point -> nat
			dist(src)(dst) == 	
				StrategoUtils`applyToMinAndMax[nat]
				(lambda -: nat, max: nat & max)
				(abs(src.x-dst.x))
				(abs(src.y-dst.y))
			pre aligned(src)(dst)
		;
		
		public alignment: Point -> Point -> (bool*bool)
			alignment(p1)(p2) ==
				mk_(p1.x = p2.x, p1.y = p2.y)
			
			post (RESULT.#1 <=> (p1.x = p2.x)) and 
					 (RESULT.#2 <=> (p1.y = p2.y)) 					 
		;
		
		public aligned: Point->Point->bool
			aligned(src)(dst) ==
				let align = alignment(src)(dst) 
				in (
					not (align.#1 and align.#2) and align.#1 or align.#2
				)
		;
		
		public getOpponent: Team -> Team
			getOpponent(pl) ==
				if pl = <Red> 
					then <Blu> 
					else <Red>
			
			post RESULT <> pl
		;
		
		public inInterval: int * int -> int -> bool
			inInterval(a,b)(val) ==
				StrategoUtils`applyToMinAndMax[bool]
				(lambda min: real, max: real & val > min and val < max)
				(a)
				(b)
		;
		
		public validDim: int -> bool 
			validDim(v) ==
				inInterval(0, StrategoRules`boardSize+1)(v)
		;
		
		public intervalSet: int->int -> set of int
			intervalSet(a)(b) ==	
				StrategoUtils`applyToMinAndMax[set of int]
				(lambda min: real, max: real & {min+1, ..., max-1})
				(a)
				(b)
			
			post forall e in set RESULT & inInterval(a, b)(e)
		;
		
		public validDimSet: () -> set of int
			validDimSet() ==
				intervalSet(0)(StrategoRules`boardSize+1)
		;
		
		public validPoint: Point -> bool 
			validPoint(p) ==
				validDim(p.x) and validDim(p.y)
		;
		
		public invertedPoint: Point -> Point
			invertedPoint(p) == 
				mk_Point(p.x, StrategoRules`boardSize - p.y + 1)
				
			pre validPoint(p)
			post validPoint(p) and p.x = RESULT.x and p.y = StrategoRules`boardSize - RESULT.y + 1
		;
		
		public pointsInRanges: set of int -> set of int -> set of Point
			pointsInRanges(xrange)(yrange) ==
				{ mk_Point(x,y) | x in set xrange , y in set yrange  &  validDim(x) and validDim(y)}
			
			post forall a in set RESULT & validPoint(a)
		;
		
		public allPoints: () -> set of Point
			allPoints() ==
				pointsInRanges(validDimSet())(validDimSet())
		;
		
		public pointsFiltered: set of Point -> (Point->bool) -> set of Point
			 pointsFiltered(gen)(f)==
			 	StrategoUtils`filterSet[Point](f)(gen)
		;
		
		public allPointsFiltered: (Point->bool) -> set of Point
			 allPointsFiltered(f)==
			 	pointsFiltered(allPoints())(f)
		;
		
		public isInBackRowBlu: Point -> bool
			isInBackRowBlu(p) ==
				p.y = 1
			
			post RESULT <=> (p.y = 1) -- trivial
		;
		
		public isInBackRowRed: Point -> bool
			isInBackRowRed(p) ==
				p.y = StrategoRules`boardSize
			
			post RESULT <=> (p.y = StrategoRules`boardSize) -- trivial
		;
		
		public isInBackRow: Team -> Point -> bool
			isInBackRow(pl)(p) ==
				if pl = <Red>
					then isInBackRowRed(p)
					else isInBackRowBlu(p)
				
			pre validPoint(p)
			post pl = <Red> => ((RESULT = true) <=> isInBackRowRed(p)) and
					 pl = <Blu> => ((RESULT = true) <=> isInBackRowBlu(p))
		;
		
		public isInTeamAreaBlu: Point -> bool
			isInTeamAreaBlu(p) ==
				p.y > 0 and p.y <= StrategoRules`boardSize * StrategoRules`sideProportion
			
			post RESULT <=> (p.y > 0 and p.y <= StrategoRules`boardSize * StrategoRules`sideProportion) -- trivial
		;
		
		public isInTeamAreaRed: Point -> bool
			isInTeamAreaRed(p) ==
				p.y <= StrategoRules`boardSize and p.y > StrategoRules`boardSize - StrategoRules`boardSize * StrategoRules`sideProportion
			
			post RESULT <=> (p.y <= StrategoRules`boardSize and p.y > StrategoRules`boardSize - StrategoRules`boardSize * StrategoRules`sideProportion) --trivial
		;
		
		public isInTeamArea: Team -> Point -> bool
			isInTeamArea(pl)(p) ==
				if pl = <Red>
					then isInTeamAreaRed(p)
					else isInTeamAreaBlu(p)
				
			pre validPoint(p)
			post pl = <Red> => ((RESULT = true) <=> isInTeamAreaRed(p)) and
					 pl = <Blu> => ((RESULT = true) <=> isInTeamAreaBlu(p))
		;
		
		public isLake:Point -> bool
			isLake(p) == 
				p in set StrategoRules`lakes
		;
		
		public pointsBetween: Point -> Point ->  set of Point
			pointsBetween(src)(dst) ==
				let align = alignment(src)(dst)
				in (
						if(align.#1)
							then pointsInRanges({src.x})(intervalSet(src.y)( dst.y))
							else pointsInRanges(intervalSet(src.x)(dst.x))({src.y})
				)
			
			pre aligned(src)(dst)
		;
		
		public getPointsInRange: nat -> Point -> set of Point
			getPointsInRange(range)(point) ==
			pointsFiltered(
				let range1 = range + 1 
				in (
					pointsInRanges({point.x})(intervalSet(point.y-range1)(point.y+range1)) union
					pointsInRanges(intervalSet(point.x-range1)(point.x+range1))({point.y})
				)												
			)
			(lambda p: Point & p <> point and validPoint(p))
		;
		
		public toPiece:  Team -> Character -> Piece
			toPiece(team)(character) ==
				mk_Piece(character, team)
		;
		
		public toPieces: seq of Character-> Team -> seq of Piece
			toPieces(characters)(team) ==
				StrategoUtils`mapFunctionSeq[Stratego`Character, Stratego`Piece](toPiece(team))(characters)
		;
		
		public toCharacters: seq of Piece -> seq of Character
			toCharacters(pieces) ==
				StrategoUtils`mapFunctionSeq[Stratego`Piece, Stratego`Character](lambda p: Piece & p.character)(pieces)
		;
		
end Stratego

