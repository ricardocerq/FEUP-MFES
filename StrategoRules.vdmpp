class StrategoRules
	values
		public boardSize = 10;
		
		public sideProportion = 0.4;
		
		public lakes = {
			mk_Stratego`Point(3,5),
			mk_Stratego`Point(3,6),
			mk_Stratego`Point(4,5),
			mk_Stratego`Point(4,6),
			
			mk_Stratego`Point(7,5),
			mk_Stratego`Point(7,6),
			mk_Stratego`Point(8,5),
			mk_Stratego`Point(8,6)
		};
		
	types
	
		public RuleSet::
			maxRescuesPerPlayer: nat1
			agressorAdvantage: bool
			silentDefense: bool
			multiplicities: map Stratego`Character to nat
			characterStrengths: seq of Stratego`Character
			specialMovementRanges: map Stratego`Character to nat
			specialStrengths: map Stratego`Character to Stratego`Character
			cannotRescue: set of Stratego`Character
			cannotBeRescued: set of Stratego`Character
			
			inv mk_RuleSet(-,-,-,m,-,smr,-,-,-) == 
					Utils`reduceMap[?, nat, nat]
					(lambda acc: nat, -: ?, n: nat & acc + n)
					(0)
					(m)
						= boardSize * boardSize * sideProportion
					
					and smr(<Flag>) = 0
		;
				
	operations
		
		functions
			public getDefaultRuleSet: () -> RuleSet
				getDefaultRuleSet() ==
					mk_RuleSet(
						 2, 
						 false, 
						 false, 
						 {
							<Flag> |-> 1 ,
							<Bomb> |-> 6 ,
							<Spy> |-> 1 ,
							<Scout> |-> 8 ,
							<Miner> |-> 5 ,
							<Sergeant> |-> 4 ,
							<Lieutenant> |-> 4 ,
							<Captain> |-> 4 ,
							<Major> |-> 3 ,
							<Colonel> |-> 2 ,
							<General> |-> 1 ,
							<Marshall> |-> 1 
						}, 
						[
							<Flag>,
							<Spy>,
							<Scout>,
							<Miner>,
							<Sergeant>,
							<Lieutenant>,
							<Captain>,
							<Major>,
							<Colonel>,
							<General>,
							<Marshall>,
							<Bomb>
						], 
						{
							<Flag> |-> 0 ,
							<Bomb> |-> 0 ,
							<Scout> |-> boardSize
						}, 
						{
							<Spy> |-> <Marshall>,
							<Miner> |-> <Bomb>
						}, 
						{
							<Scout>
						}, 
						{
							<Bomb>
						}
					)
			;
		
			public getStrength: RuleSet -> Stratego`Character -> nat
				getStrength(ruleset)(character) ==
					Utils`indexOf[Stratego`Character](ruleset.characterStrengths)(character)
			;
			
			public getMovementRange: RuleSet->Stratego`Character-> nat
				getMovementRange(ruleset)(character) ==
					if(character in set dom ruleset.specialMovementRanges) then (
						ruleset.specialMovementRanges(character)
					) else (
						1
					)
			;
			
			public getNumberOfCharacters: () -> nat
				getNumberOfCharacters() ==
					boardSize * sideProportion * boardSize
			;
			
			public getAllCharacters: RuleSet -> seq of Stratego`Character 
				getAllCharacters(ruleSet) ==
					conc Utils`mapFunctionMap[Stratego`Character, nat, seq of Stratego`Character]
						(lambda c: Stratego`Character, m: nat & 
							((lambda acc: seq of Stratego`Character & acc ^ [c])**m)([])
						)
						(ruleSet.multiplicities)
					post Utils`countElems[Stratego`Character](RESULT) = ruleSet.multiplicities
			;
			
			public getAllPieces: RuleSet -> Stratego`Team -> seq of Stratego`Piece
				getAllPieces(ruleSet)(team) ==
					Stratego`toPieces(getAllCharacters(ruleSet))(team)
				
				post (forall el in seq RESULT & el.team = team) and
							Stratego`toCharacters(RESULT) = getAllCharacters(ruleSet)
			;
			
			public resolveAttack: RuleSet -> Stratego`Piece -> [Stratego`Piece] -> (bool*bool)
				resolveAttack(ruleset)(p1)(p2) ==
					if(p2 = nil) then 
						mk_(true, false)
					else if(p1.character = p2.character) then (
						if(ruleset.agressorAdvantage) then
							mk_(true,false)
						else 
							mk_(false,false)
					)
					else (
						if(p1.character in set dom ruleset.specialStrengths and ruleset.specialStrengths(p1.character) = p2.character) then
							mk_(true, false)
						else (
							let str = getStrength(ruleset) in (
									if(str(p1.character) > str(p2.character)) then
										mk_(true, false)
									else 
										mk_(false,true)
									
							)
						)
					)
				pre p2 = nil or p1.team <> p2.team
			;
			
			
end StrategoRules